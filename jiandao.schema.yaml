# Rime schema settings
# encoding: utf-8

schema:
  schema_id: jiandao
  name: 🌟️星空键道
  version: "6"
  author:
    - 发明人：吅吅大山
  description: |
    双拼／音形／顶功输入方案
    原维护者：星空键道6顶功委员会 <https://github.com/xkinput>

# Layout config
layout:
  topup:
    topup_this: "bcdefghjklmnpqrstwxyz"
    topup_with: "avuio;"

  algebra:
    - derive/^[bcdefghjklmnpqrstwxyz;]([bcdefghjklmnpqrstwxyz;][avuio].*)$/`$1/
    - derive/^([bcdefghjklmnpqrstwxyz;])[bcdefghjklmnpqrstwxyz;]([avuio].*)$/$1`$2/
    - derive/^([bcdefghjklmnpqrstwxyz;`]{2})[avuio](.*)$/$1`$2/
    - derive/^([bcdefghjklmnpqrstwxyz;`]{2}[avuio`]).(.*)$/$1`$2/
    - derive/^([bcdefghjklmnpqrstwxyz;`]{2}[avuio`]{2}).(.*)$/$1`$2/
    - derive/^([bcdefghjklmnpqrstwxyz;`]{2}[avuio`]{3}).(.*)$/$1`$2/
    - derive/^([bcdefghjklmnpqrstwxyz;`]{2}[avuio`]{4}).(.*)$/$1`$2/
    - derive/^([bcdefghjklmnpqrstwxyz;`]{2}[avuio`]{5}).$/$1`/
    - derive/^[bcdefghjklmnpqrstwxyz;]{2}([avuio`]*)$/``$1/

switches:
  - name: ascii_mode
    reset: 0
    states: [ 中, En ]
  - name: full_shape
    states: [ 半, 全 ]
  - name: jffh
    reset: 0
    states: [ 汉, 漢 ]
  - name: 630_hint
    reset: 1
    states: [ "关", "630提示" ]
  - name: topup_hint
    reset: 1
    states: [ "关", "顶功提示" ]
  - name: emoji_suggestion
    reset: 0
    states: [ "无", "🈶" ]

engine:
  processors:
    - ascii_composer
    - recognizer
    - key_binder
    - lua_processor@*jiandao/smart_selector
    - lua_processor@*jiandao/topup_selector
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - fallback_segmentor
  translators:
    - punct_translator
    - table_translator@custom_phrase
    - table_translator
    - history_translator@repeat_history
    - lua_translator@*jiandao/date_time_translator
    - lua_translator@*jiandao/calculator
    - lua_translator@*jiandao/unicode_translator
  filters:
    - simplifier@emoji_suggestion
    - simplifier
    - uniquifier
    - simplifier@jffh
    - reverse_lookup_filter@danzi_lookup
    - lua_filter@*jiandao/hint_filter

speller:
  algebra:
    __include: "layout/algebra"
  auto_select: false
  alphabet: "zyxwvutsrqponmlkjihgfedcba;`"
  initials: "abcdefghijklmnopqrstuvwxyz;`"

translator:
  dictionary: jiandao
  enable_charset_filter: false
  enable_completion: true
  enable_encoder: true
  enable_sentence: false
  enable_user_dict: false
  encode_commit_history: true
  max_phrase_length: 6

repeat_history:
  input: ;h #重复上次上屏内容
  size: 1
  initial_quality: 10000

emoji_suggestion:
  opencc_config: emoji.json
  option_name: emoji_suggestion
  tips: all

jffh:
  opencc_config: s2tw.json
  option_name: jffh

danzi_lookup:
  dictionary: jiandao
  tags: [ danzi_lookup ]
  overwrite_comment: true
  enable_charset_filter: false
  enable_completion: true
  enable_encoder: false
  enable_sentence: false
  enable_user_dict: false
  encode_commit_history: false
  comment_format:
    - xform/ /, /
    - xform/^/〔/
    - xform/$/〕/

custom_phrase:
  dictionary: ""
  user_dict: user_dict
  db_class: stabledb
  enable_sentence: false

punctuator:
  import_preset: symbols

key_binder:
  bindings:
    - { when: always, accept: Shift+space, select: .next }
    - { when: always, accept: Control+Alt+comma, toggle: full_shape }
    - { when: always, accept: Control+Alt+period, toggle: ascii_punct }
    - { when: has_menu, accept: "Control+slash", toggle: jffh }
    - { when: has_menu, accept: "Control+backslash", toggle: emoji_suggestion }
    - { when: composing, accept: KP_0, send: 0 }
    - { when: composing, accept: KP_1, send: 1 }
    - { when: composing, accept: KP_2, send: 2 }
    - { when: composing, accept: KP_3, send: 3 }
    - { when: composing, accept: KP_4, send: 4 }
    - { when: composing, accept: KP_5, send: 5 }
    - { when: composing, accept: KP_6, send: 6 }
    - { when: composing, accept: KP_7, send: 7 }
    - { when: composing, accept: KP_8, send: 8 }
    - { when: composing, accept: KP_9, send: 9 }
    - { when: composing, accept: KP_Add, send: plus }
    - { when: composing, accept: KP_Subtract, send: minus }
    - { when: composing, accept: KP_Multiply, send: asterisk }
    - { when: composing, accept: KP_Divide, send: slash }
    - { when: composing, accept: KP_Decimal, send: period }
    - { when: has_menu, accept: minus, send: Page_Up }
    - { when: has_menu, accept: equal, send: Page_Down }

recognizer:
  import_preset: default
  patterns:
    danzi_lookup: "[a-z`]*`+[a-z`]*"
    punct: "^/([0-9]0?|[a-z]+)$"
    calc: "^=[^;']+$"
    unicode: "^u`[0-9a-f]*$"

topup:
  __include: "layout/topup"
  min_length: 4
  max_length: 6
  auto_clear: true
  min_length_danzi: 2
  topup_command: true
